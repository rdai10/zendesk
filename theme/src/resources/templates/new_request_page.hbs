<div class="container-fluid container-fluid-max-xl main-content">
	<div class="d-none justify-content-sm-center row watcher-message">
		<h1 class="col-sm-6">
			{{dc 'we_are_sorry_but_you_do_not_have_access_to_submit_a_support_ticket'}}
		</h1>
	</div>

	<div class="d-none request-form-wrapper">
		<div class="row">
			<div class="col-sm-12">
				{{breadcrumbs}}
			</div>
		</div>

		<div class="justify-content-sm-center row">
			<div class="col-sm-6">
				<h1>
					{{t 'submit_a_request'}}
				</h1>

				<div class="request-form">
					{{request_form wysiwyg=true}}
				</div>
			</div>
		</div>
	</div>
</div>

<script>
	// In the DOM, ids represent a field whereas class of the same name is the wrapper for the corresponding field

	domLoaded(function() {
		const userOrganizations = HelpCenter.user.organizations;

		// When a user does not belong to any organization, they cannot create tickets

		if (!userOrganizations.length) {
			return;
		}

		const currentOrgId = document.querySelector('[aria-describedby="request_organization_id_hint"]');

		function addPrefixToOrgTags(tags) {
			return tags.map(tag => 'prd_' + tag);
		}

		function findCurrentOrgTags() {
			// When a user belongs to multiple organizations, retrieve tags from the currently selected organization

			if (currentOrgId) {
				const currentOrg = userOrganizations.find(
					org => org.name === currentOrgId.text
				);

				return currentOrg?.tags ?? [];
			}

			// When a user belongs to only one organization, the org field will not be displayed

			return userOrganizations[0].tags;
		}

		function hideDropdownOptions(options, target) {
			options.forEach(
				option => {
					const node = target.querySelector(`li#${option}`);

					node?.setAttribute('style', 'display: none;');
				}
			);
		}

		function hideNestedDropdownOptions(option, target) {
			target?.querySelectorAll('li').forEach(
				(node) => {
					let id = node.id;

					// Transform the Nested Field id to match its label value so it can be compared

					if (id.indexOf('prd') === -1) {
						id = 'prd_' + node.innerText.toLowerCase().replace(' ', '_');
					}

					if (id === option) {
						node?.setAttribute('style', 'display: none;');
					}
				}
			);
		}

		function mapInputValuesFromField(field) {
			const dataset = JSON.parse(field?.dataset.tagger);

			const inputValues = dataset.map(
				input => {
					var val = input.value;

					if (val === undefined) {
						val = 'prd_' + input.label.toLowerCase().replace(' ', '_');
					}

					return val;
				}
			);

			inputValues.shift();

			return inputValues;
		}

		function matchProductComponents(product) {
			var productMatch = productComponentsMapping.filter(
				value => product.match(value.product)
			);

			// Match again if more than one match was found

			if (productMatch.length > 1) {
				productMatch = productMatch.filter(
					value => ('prd_' + value.product) === product
				);
			}

			return productMatch[0];
		}

		function matchValueToTags(value, tags) {
			return tags.some(tag => value === tag);
		}

		const productComponentsMapping = [
			{
				components: [
					'cross_cluster_replication',
					'elasticsearch',
					'learning_to_rank',
					'monitoring',
					'search_experiences',
					'security'
				],
				product: 'enterprise_search'
			},
			{
				components: [
					'activation_key_project_administration',
					'apis_integrations_and_extension_points',
					'commerce_insights',
					'configuration_and_settings',
					'connectors',
					'digital_merchandise_management',
					'digital_store_management',
					'shopping_experience'
				],
				product: 'liferay_commerce'
			},
			{
				components: [
					'activation_key_project_administration',
					'authentication',
					'caching_clustering',
					'calendar',
					'collaboration',
					'content_management',
					'data_frameworks',
					'deployment_environments',
					'document_management',
					'forms',
					'liferay_api',
					'liferay_objects',
					'localization',
					'performance',
					'publication_and_staging',
					'search_engine_optimization_seo',
					'search_indexing',
					'security_management',
					'segmentation',
					'site_and_page_management',
					'system_management',
					'ui_infrastructure_accessibility',
					'upgrade',
					'user_membership_role_management',
					'workflow'
				],
				product: 'liferay_dxp'
			},
			{
				components: [
					'activation_key_project_administration',
					'authentication',
					'caching_clustering',
					'calendar',
					'collaboration_suite',
					'deployment_environments',
					'document_management',
					'liferay_api',
					'liferay_sync',
					'localization',
					'patch_management',
					'portal_developer_tools',
					'search_indexing',
					'security',
					'staging_export_import',
					'ui_infrastructure_accessibility',
					'upgrade',
					'user_membership_role_management',
					'web_content',
					'workflow_workflow_forms'
				],
				product: 'liferay_portal'
			}
		];

		const componentInputField = document.getElementById('request_custom_fields_360011314571');
		const productInputField = document.getElementById('request_custom_fields_360006041192');

		const allComponents = mapInputValuesFromField(componentInputField);
		const allProducts = mapInputValuesFromField(productInputField);

		const mutationHandler = mutation => {
			const {addedNodes, target} = mutation;
			const currentTarget = document.getElementById(target.id);

			// When a nesty-input dropdown is clicked, a new node is inserted to the corresponding nesty-panel.

			if (addedNodes.length) {
				// Product dropdown

				const prefixedOrgTags = addPrefixToOrgTags(findCurrentOrgTags());

				// ISSUP-4450 Allow DXP customers to open Commerce or Liferay Enterprise Search tickets

				const isDXPCustomer = prefixedOrgTags.includes('prd_liferay_dxp');
				const filteredOutProducts = allProducts.filter(
					value => !matchValueToTags(value, prefixedOrgTags)
				);

				filteredOutProducts.forEach(
					option => {
						const reservedProducts = isDXPCustomer && (option === 'prd_liferay_commerce' || option === 'prd_enterprise_search') 

						if (!reservedProducts) {
							hideNestedDropdownOptions(option, currentTarget);
						}
					}
				);

				// Component dropdown

				const currentProduct = productInputField.value;

				if (currentProduct) {
					const match = matchProductComponents(currentProduct);

					if (match) {
						const componentOptions = match.components;
						const filteredOutComponents = allComponents.filter(
							value => !matchValueToTags(value, componentOptions)
						);

						hideDropdownOptions(filteredOutComponents, currentTarget);
					}
				}
			}
		}

		const formChangeHandler = function(mutationsList, observer) {
			for(const mutation of mutationsList) {
				mutationHandler(mutation);
			}
		};

		const observer = new MutationObserver(formChangeHandler);

 		document.querySelectorAll('.nesty-panel').forEach(target => observer.observe(target, {childList: true}));

		const productNestyInput = document.querySelector('.request_custom_fields_360006041192 .nesty-input');

		if (productNestyInput) {
			const orgSelectField = document.getElementById('request_organization_id');

			if (orgSelectField) {
				orgSelectField.onchange = function() {
					productInputField.value = '';
					productNestyInput.textContent = '-';
				}
			}
		}

		// Append an element to render the article suggestions

		const newElement = document.createElement('div');
		newElement.id = 'articleSuggestionWrapper';

		const requestSubject = document.querySelector('.request_subject');
		requestSubject?.appendChild(newElement);

		const setArticleSuggestionInnerHTML = function(html) {
			const articleSuggestionWrapper = document.getElementById('articleSuggestionWrapper');

			if (articleSuggestionWrapper) {
				articleSuggestionWrapper.innerHTML = html;
			}
		}

		// Custom article suggestion

		const searchProductLabel = {
			prd_liferay_analytics_cloud: 'Analytics',
			prd_liferay_commerce: 'Commerce',
			prd_liferay_dxp_7_0: 'DXP 7.0',
			prd_liferay_dxp_7_1: 'DXP 7.1',
			prd_liferay_dxp_7_2: 'DXP 7.2',
			prd_liferay_dxp_7_3: 'DXP 7.3',
			prd_liferay_dxp_7_4: 'DXP 7.4',
			prd_liferay_dxp_cloud: 'DXP Cloud',
			prd_liferay_portal_6_1: 'Portal 6.1',
			prd_liferay_portal_6_2: 'Portal 6.2'
		};

		const subjectField = document.getElementById('request_subject');

		const onRequestSubjectKeyup = function() {
			const productLabel = searchProductLabel[productInputField.value] || '';

			if (subjectField.value) {
				Liferay.displayArticleSuggestion(
					subjectField.value,
					productLabel,
					'{{help_center.locale}}',
					'{{dc 'ticket_view-suggested_articles'}}', setArticleSuggestionInnerHTML
				);
			}
			else {
				setArticleSuggestionInnerHTML('');
			}
		}

		subjectField.addEventListener(
			'keyup',
			Liferay.debounce(onRequestSubjectKeyup, 300)
		);

		productInputField.onchange = onRequestSubjectKeyup;
	});
</script>